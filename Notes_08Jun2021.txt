in a Spring boot application
	How we are going to store information across different views.
	What we do in the controller

	how we can manage the session information across pages?

in login page, i can enter username and password
	but in all other pages, my username is remembered by the application
	where is it stored?
		session
	until i logout, the username is remembered.

	the username is String. But user object????	can contain (username, role, firstName,........)

	so we can store an object or a List of objects in a session.

	before we learn session, lets learn model.

Bank demo:
	the jsp page, is displaying all the branches. Where is the list of branch?


different type of mappings

@RequestMapping
	can be used for any http method
		GET, POST, PUT, DELETE

@GetMapping
	means GET only
@PostMapping
@PutMapping
@DeleteMapping



@GetMapping("/select/{bid}")					bid is a pathvariable here


https://docs.jboss.org/resteasy/docs/1.0.2.GA/userguide/html/index.html



package com.example.demo.controller;

import java.sql.SQLException;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.example.demo.dao.BranchDao;
import com.example.demo.entity.Branch;

@Controller
public class BranchController {

//	@GetMapping("/branch")
//	public String home(ModelMap modelMap) throws ClassNotFoundException, SQLException
//	{
////		modelMap.addAttribute("username", "Raja");
////		modelMap.addAttribute("role", "Admin");
//		BranchDao bdao=new BranchDao();
//		List<Branch> branchList = bdao.read();
//		modelMap.addAttribute("branches",branchList);
//		return "branch";
//	}
	
	@GetMapping("/branch")
	public ModelAndView home() throws ClassNotFoundException, SQLException
	{
		BranchDao bdao=new BranchDao();
		List<Branch> branchList = bdao.read();
		ModelAndView mv=new ModelAndView();
		mv.addObject("branches", branchList);
		mv.addObject("branch",new Branch());
		mv.setViewName("branch");
		return mv;
	}
	
//	@PostMapping("/add")
//	@ResponseBody	//to inform that this method does not return URL. rather, it returns value to be printed in browser
//	public Branch addBranch(Branch branch) throws ClassNotFoundException, SQLException
//	{
//		BranchDao bdao=new BranchDao();
//		int status = bdao.create(branch);
//		if(status>0)
//			return branch;
//		else
//			return null;
//	}
	
//	@PostMapping("/add")
	@RequestMapping(method = RequestMethod.POST, value = "/branch", params = "add" )
	public ModelAndView addBranch(Branch branch) throws ClassNotFoundException, SQLException
	{
		BranchDao bdao=new BranchDao();
		int status = bdao.create(branch);
		System.out.println(status);
		return home();
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/branch", params = "modify" )
	public ModelAndView modifyBranch(Branch branch) throws ClassNotFoundException, SQLException
	{
		BranchDao bdao=new BranchDao();
		int status = bdao.update(branch);
		System.out.println(status);
		return home();
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/branch", params = "delete" )
	public ModelAndView deleteBranch(Branch branch) throws ClassNotFoundException, SQLException
	{
		BranchDao bdao=new BranchDao();
		int status = bdao.delete(branch.getBid());
		System.out.println(status);
		return home();
	}
	
//	@GetMapping("/select/{bid}")
//	public ModelAndView select(@PathVariable("bid") String bid) throws ClassNotFoundException, SQLException
//	{
//		BranchDao bdao=new BranchDao();
//		List<Branch> branchList = bdao.read();
//		ModelAndView mv=new ModelAndView();
//		mv.addObject("branches", branchList);
//		Branch branch = bdao.read(bid);
//		mv.addObject("branch", branch);
//		mv.setViewName("branch");
//		return mv;
//	}
	
	@GetMapping("/select")
	public ModelAndView select(@RequestParam("bid") String bid) throws ClassNotFoundException, SQLException
	{
		BranchDao bdao=new BranchDao();
		List<Branch> branchList = bdao.read();
		ModelAndView mv=new ModelAndView();
		mv.addObject("branches", branchList);
		Branch branch = bdao.read(bid);
		mv.addObject("branch", branch);
		mv.setViewName("branch");
		return mv;
	}
	
}

